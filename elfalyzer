#!/usr/bin/env python3

from elftools.elf.elffile import ELFFile
import sys

# Define planned sizes (in bytes) for sections of interest
SECTION_SIZE_LIMITS = {
    # ".text": 200,
    ".data": 4,
    ".custom_data1": 4,
    ".custom_data2": 8
    # ... add other sections and their size limits here
}

max_height = 10  # Maximum height in characters for the largest section
width = 50  # Width of a block


def get_actual_section_sizes(elf_filename):
    with open(elf_filename, "rb") as f:
        elffile = ELFFile(f)
        return {section.name: section["sh_size"] for section in elffile.iter_sections()}


def compare_sizes(planned_sizes, actual_sizes):
    for section, planned_size in planned_sizes.items():
        actual_size = actual_sizes.get(section, 0)
        if actual_size > planned_size:
            print(
                f"WARNING: Section {section} is {actual_size} bytes, which exceeds the planned {planned_size} bytes!"
            )
        else:
            print(f"Section: {section}\tSize: {actual_size} bytes (within limit)")


def render_memory_map(planned_sizes, actual_sizes):
    # Find the largest section size for scaling
    largest_size = max(planned_sizes.values())

    print("\nMemory Map:")
    for section, planned_size in planned_sizes.items():
        actual_size = actual_sizes.get(section, 0)

        # Calculate heights for the section
        full_height = int((planned_size / largest_size) * max_height)
        filled_height = int((actual_size / largest_size) * max_height)

        print(section)
        print("┌" + "─" * width + "┐")
        for _ in range(filled_height if filled_height <= full_height else full_height):
            print("│" + "▒" * width + "│")
        for _ in range(full_height - filled_height):
            print("│" + " " * width + "│")
        if filled_height > full_height:
            print("│" + "." * width + "│")  # Closing border for planned size
            for _ in range(filled_height - full_height):
                print("┆" + "░" * width + "┆")
            print("└" + "┄" * width + "┘")
        else:
            print("└" + "─" * width + "┘")  # Closing border for planned size
        print("\n")


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: elfalyzer <path_to_elf_file>")
    else:
        actual_sizes = get_actual_section_sizes(sys.argv[1])
        compare_sizes(SECTION_SIZE_LIMITS, actual_sizes)
        render_memory_map(SECTION_SIZE_LIMITS, actual_sizes)
